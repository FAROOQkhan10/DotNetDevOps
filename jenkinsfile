pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mohammadfarooq/weatherimage'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'dotnet build src/DotNetDevOps/DotNetDevOps.csproj --configuration Release'
            }
        }

        stage('Test') {
            steps {
                sh 'dotnet test src/DotNetDevOps.sln --logger "trx;LogFileName=./aspnetapp.trx"'
            }
        }

       stage('Build Docker Image') {
                steps {
                    script {
                        def imageName = 'weatherimage'
                        def imageTag = 'latest'
                        def container_name = 'weather'
                        def dockerfilePath = "${WORKSPACE}/Dockerfile"
                        def existingImageId = sh(script: "docker images -q ${imageName}:${imageTag}", returnStdout: true).trim()
                        if (existingImageId) {
                            echo "Existing Docker container name: ${container_name}"
                            sh "docker rm -f ${container_name}"
                            echo "Existing Docker image ID: ${existingImageId}"
                            sh "docker rmi -f ${existingImageId}"
                            echo "Deleted existing Docker image: ${imageName}:${imageTag}"
                        }
                        sh "docker build -t ${imageName}:${imageTag} -f ${dockerfilePath} ${WORKSPACE}"
                    }
                }
            }



        stage('Docker Push') {
            steps {
                script {
                    // Login to Docker Hub (or your Docker registry)
                    // Make sure to set your credentials in Jenkins credential store
                    docker.withRegistry('https://index.docker.io/v1/', 'docker_login') {
                        // Push your Docker image
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                script {
                    // Stop the currently running container (if any)
                    sh 'docker rm -f ${IMAGE_NAME} || true'
                    // Run the new container
                    sh "docker run -d --name weather -p 8000:80 ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }
}
